---
import { type CollectionEntry } from 'astro:content'

import { getBlogCollection } from 'astro-pure/server'
import { cn } from 'astro-pure/utils'

export const prerender = true
export const partial = true

const notesCollection = (await getBlogCollection('notes')) as CollectionEntry<'notes'>[]
// Group notes by id first part (setup, integrations, advanced, etc.)
const notesByCate = notesCollection.reduce((acc: { [key: string]: typeof notesCollection }, doc) => {
  const id = doc.id.split('/')[0]
  if (!acc[id]) acc[id] = [] as typeof notesCollection
  acc[id].push(doc)
  return acc
}, {})

// const docCategories = {
//   setup: 'Setup',
//   integrations: 'Integrations',
//   advanced: 'Advanced'
// }
const docCategories = {
  dm: '离散数学',
  ds: '数据结构',
  csapp: 'CSAPP',
  blog: '建站笔记',
  ml: '机器学习'
}

type Props = {
  title?: boolean
  class?: string
}

const { title = true, class: className, ...props } = Astro.props
---

<notes-toc class={cn('not-prose', className)} {...props}>
  {title && <h2 class='text-foreground font-semibold'>NOTES</h2>}
  <ul class='mt-4 flex flex-col gap-y-5'>
    {
      Object.entries(docCategories).map(([id, title]: [string, string]) => (
        <li>
          <h3 class='text-muted-foreground text-xs tracking-widest uppercase'>{title}</h3>
          <ul class='mt-2 flex flex-col'>
            {notesByCate[id]
              .sort((a, b) => a.data.order - b.data.order)
              .map((doc) => (
                <li class='notes-item flex relative ms-2 px-3 py-1 text-foreground/75 transition-all rounded-2xl'>
                  <a class='flex-1 hover:text-foreground' href={`/notes/${doc.id}`}>
                    {doc.data.title}
                  </a>
                </li>
              ))}
          </ul>
        </li>
      ))
    }
  </ul>
</notes-toc>

<style>
  notes-toc .notes-item::before {
    content: '';
    display: block;
    position: absolute;
    top: 5%;
    bottom: 5%;
    left: -0.5rem;
    width: 2px;
    background-color: hsl(var(--input) / var(--un-bg-opacity));
  }

  notes-toc :global(.notes-item.notes-hl) {
    background-color: hsl(var(--muted) / var(--un-bg-opacity));
    font-weight: 500;
    & a {
      color: hsl(var(--primary) / var(--un-text-opacity));
    }

    &::before {
      background-color: hsl(var(--primary) / var(--un-bg-opacity));
    }
  }
</style>

<script>
  class NotesTOC extends HTMLElement {
    link: string = ''

    constructor() {
      super()

      this.link = window.location.pathname
    }

    connectedCallback() {
      const links = this.querySelectorAll('a')
      links.forEach((link) => {
        if (link.getAttribute('href') === this.link) {
          link.parentElement?.classList.add('notes-hl')
        }
      })
    }
  }

  customElements.define('notes-toc', NotesTOC)
</script>